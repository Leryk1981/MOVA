"""
Command Line Interface for MOVA language
–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è –º–æ–≤–∏ MOVA
"""

import click
import json
import os
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from loguru import logger

from ..core.engine import MovaEngine
from ..core.models import ProtocolStep
from ..parser.json_parser import MovaJsonParser
from ..parser.yaml_parser import MovaYamlParser
from ..validator.schema_validator import MovaSchemaValidator
from ..ml.integration import MLIntegration
from ..webhook_integration import get_webhook_integration
from ..redis_manager import get_redis_manager
from ..cache import get_cache
from ..config import get_config_value, set_config_value


console = Console()


@click.group()
@click.version_option(version="2.2.0", prog_name="MOVA")
@click.option('--redis-url', default=None, help='Redis connection URL / URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis')
@click.option('--llm-api-key', default=None, help='OpenRouter API key / OpenRouter API –∫–ª—é—á')
@click.option('--llm-model', default='openai/gpt-3.5-turbo', help='LLM model to use / –ú–æ–¥–µ–ª—å LLM –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è')
@click.option('--llm-temperature', default=0.7, type=float, help='LLM temperature (0.0-2.0) / –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ LLM')
@click.option('--llm-max-tokens', default=1000, type=int, help='LLM max tokens / –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤')
@click.option('--llm-timeout', default=30, type=int, help='LLM timeout in seconds / –¢–∞–π–º–∞—É—Ç LLM –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
@click.option('--webhook-enabled', is_flag=True, help='Enable webhook integration / –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é webhook')
@click.option('--cache-enabled', is_flag=True, help='Enable caching / –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–µ—à—É–≤–∞–Ω–Ω—è')
@click.option('--ml-enabled', is_flag=True, help='Enable ML integration / –£–≤—ñ–º–∫–Ω—É—Ç–∏ ML —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é')
@click.pass_context
def main(ctx, redis_url, llm_api_key, llm_model, llm_temperature, llm_max_tokens, llm_timeout, 
         webhook_enabled, cache_enabled, ml_enabled):
    """
    MOVA - Machine-Operable Verbal Actions
    
    A declarative language for LLM interactions
    –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∞ –º–æ–≤–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ LLM
    """
    # Store global options in context
    ctx.ensure_object(dict)
    ctx.obj['redis_url'] = redis_url
    ctx.obj['llm_api_key'] = llm_api_key
    ctx.obj['llm_model'] = llm_model
    ctx.obj['llm_temperature'] = llm_temperature
    ctx.obj['llm_max_tokens'] = llm_max_tokens
    ctx.obj['llm_timeout'] = llm_timeout
    ctx.obj['webhook_enabled'] = webhook_enabled
    ctx.obj['cache_enabled'] = cache_enabled
    ctx.obj['ml_enabled'] = ml_enabled
    
    # Initialize integrations based on flags
    if webhook_enabled:
        set_config_value("webhook_enabled", True)
    if cache_enabled:
        set_config_value("cache_enabled", True)
    if ml_enabled:
        set_config_value("ml_enabled", True)


@main.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--validate', is_flag=True, help='Validate file schema / –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —Å—Ö–µ–º—É —Ñ–∞–π–ª—É')
@click.option('--output', '-o', type=click.Path(), help='Output file path / –®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É')
def parse(file_path, validate, output):
    """Parse MOVA file / –ü–∞—Ä—Å–∏—Ç–∏ MOVA —Ñ–∞–π–ª"""
    try:
        file_path = Path(file_path)
        
        # Choose parser based on file extension
        if file_path.suffix.lower() in ['.yaml', '.yml']:
            parser = MovaYamlParser()
        else:
            parser = MovaJsonParser()
        
        # Parse file
        data = parser.parse_file(str(file_path))
        
        # Validate if requested
        if validate:
            validator = MovaSchemaValidator()
            is_valid, errors = validator.validate_mova_file(data)
            
            if is_valid:
                console.print(Panel("‚úÖ File validation successful", style="green"))
            else:
                console.print(Panel("‚ùå File validation failed", style="red"))
                if errors:
                    for error in errors:
                        console.print(f"  ‚Ä¢ {error}", style="red")
        
        # Display parsed data
        display_parsed_data(data)
        
        # Export if output specified
        if output:
            export_data(data, output, parser)
            
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI parse error: {e}")


@main.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--advanced', '-a', is_flag=True, help='Use advanced validation / –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é')
@click.option('--detailed', '-d', is_flag=True, help='Show detailed validation report / –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó')
@click.option('--output', '-o', type=click.Path(), help='Save validation report to file / –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª')
def validate(file_path, advanced, detailed, output):
    """Validate MOVA file schema / –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —Å—Ö–µ–º—É MOVA —Ñ–∞–π–ª—É"""
    try:
        file_path = Path(file_path)
        
        # Choose parser based on file extension
        if file_path.suffix.lower() in ['.yaml', '.yml']:
            parser = MovaYamlParser()
        else:
            parser = MovaJsonParser()
        
        # Parse file
        data = parser.parse_file(str(file_path))
        
        # Validate schema
        validator = MovaSchemaValidator()
        
        if advanced:
            # Advanced validation
            try:
                report = validator.validate_mova_file_advanced(data)
                
                if detailed:
                    display_advanced_validation_report(report)
                else:
                    display_validation_summary(report)
                
                # Save report if requested
                if output:
                    save_validation_report(report, output)
            except Exception as e:
                console.print(f"‚ùå Advanced validation error: {e}", style="red")
                logger.error(f"Advanced validation error: {e}")
                
        else:
            # Basic validation
            is_valid, errors = validator.validate_mova_file(data)
            
            if is_valid:
                console.print(Panel("‚úÖ File validation successful", style="green"))
            else:
                console.print(Panel("‚ùå File validation failed", style="red"))
                if errors:
                    for error in errors:
                        console.print(f"  ‚Ä¢ {error}", style="red")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI validate error: {e}")


@main.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--session-id', help='Session ID / ID —Å–µ—Å—ñ—ó')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output / –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
@click.option('--step-by-step', is_flag=True, help='Execute step by step with confirmation / –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–æ–∫–æ–≤–æ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º')
@click.pass_context
def run(ctx, file_path, session_id, verbose, step_by_step):
    """Run MOVA file / –ó–∞–ø—É—Å—Ç–∏—Ç–∏ MOVA —Ñ–∞–π–ª"""
    # Get global options from context
    redis_url = ctx.obj.get('redis_url')
    llm_api_key = ctx.obj.get('llm_api_key')
    llm_model = ctx.obj.get('llm_model')
    llm_temperature = ctx.obj.get('llm_temperature')
    llm_max_tokens = ctx.obj.get('llm_max_tokens')
    llm_timeout = ctx.obj.get('llm_timeout')
    
    try:
        file_path = Path(file_path)
        
        # Choose parser based on file extension
        if file_path.suffix.lower() in ['.yaml', '.yml']:
            parser = MovaYamlParser()
        else:
            parser = MovaJsonParser()
        
        # Parse file
        data = parser.parse_file(str(file_path))
        
        # Initialize engine with Redis and LLM if provided
        engine = MovaEngine(
            redis_url=redis_url,
            llm_api_key=llm_api_key,
            llm_model=llm_model
        )
        
        # Update LLM configuration if provided
        if engine.llm_client:
            engine.llm_client.config.temperature = llm_temperature
            engine.llm_client.config.max_tokens = llm_max_tokens
            engine.llm_client.config.timeout = llm_timeout
        
        # Initialize integrations
        webhook_integration = get_webhook_integration()
        cache_manager = get_cache()
        ml_integration = MLIntegration() if ctx.obj.get('ml_enabled') else None
        
        if redis_url:
            console.print(f"üîó Using Redis: {redis_url}")
        else:
            console.print("üíæ Using in-memory storage")
            
        if llm_api_key:
            console.print(f"ü§ñ Using LLM model: {llm_model}")
            console.print(f"üå°Ô∏è  Temperature: {llm_temperature}")
            console.print(f"üìù Max tokens: {llm_max_tokens}")
            console.print(f"‚è±Ô∏è  Timeout: {llm_timeout}s")
        else:
            console.print("ü§ñ Using mock LLM responses")
        
        if ctx.obj.get('webhook_enabled'):
            console.print("üîó Webhook integration enabled")
        
        if ctx.obj.get('cache_enabled'):
            console.print("üíæ Caching enabled")
        
        if ctx.obj.get('ml_enabled'):
            console.print("ü§ñ ML integration enabled")
        
        # Load data into engine
        load_data_to_engine(engine, data)
        
        # Create session if not provided
        if not session_id:
            session_id = engine.create_session("default_user").session_id
        
        console.print(f"üöÄ Running MOVA file with session: {session_id}")
        
        # Run protocols if available
        if data.get("protocols"):
            for protocol in data["protocols"]:
                console.print(f"üìã Executing protocol: {protocol['name']}")
                
                # Trigger webhook event
                webhook_integration.trigger_validation_event("started", {
                    "protocol": protocol['name'],
                    "session_id": session_id
                })
                
                if step_by_step:
                    # Execute step by step
                    result = execute_protocol_step_by_step(engine, protocol, session_id, verbose)
                else:
                    # Execute normally
                    try:
                        result = engine.execute_protocol(protocol['name'], session_id)
                        display_execution_result(result)
                        
                        # Trigger webhook event
                        webhook_integration.trigger_validation_event("completed", {
                            "protocol": protocol['name'],
                            "session_id": session_id,
                            "result": result
                        })
                        
                        # Generate ML recommendations if enabled
                        if ml_integration:
                            recommendations = ml_integration.generate_recommendations(
                                session_id=session_id,
                                protocol_name=protocol['name']
                            )
                            if recommendations:
                                display_recommendations(recommendations, verbose)
                                
                    except Exception as e:
                        console.print(f"‚ùå Error executing protocol {protocol['name']}: {e}", style="red")
                        
                        # Trigger webhook event
                        webhook_integration.trigger_validation_event("failed", {
                            "protocol": protocol['name'],
                            "session_id": session_id,
                            "error": str(e)
                        })
        else:
            console.print("‚ÑπÔ∏è  No protocols found in file")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI run error: {e}")


@main.command()
def init():
    """Initialize new MOVA project / –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç MOVA"""
    try:
        # Create project structure
        create_project_structure()
        
        # Create example files
        create_example_files()
        
        console.print(Panel("‚úÖ MOVA project initialized successfully", style="green"))
        console.print("üìÅ Project structure created:")
        console.print("  ‚Ä¢ src/mova/ - Source code")
        console.print("  ‚Ä¢ examples/ - Example files")
        console.print("  ‚Ä¢ schemas/ - JSON schemas")
        console.print("  ‚Ä¢ tests/ - Test files")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI init error: {e}")


@main.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--step-id', help='Test specific step by ID / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫—Ä–æ–∫ –∑–∞ ID')
@click.option('--api-id', help='Test specific API by ID / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π API –∑–∞ ID')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output / –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
@click.option('--dry-run', is_flag=True, help='Show what would be executed without running / –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –±–µ–∑ –∑–∞–ø—É—Å–∫—É')
@click.pass_context
def test(ctx, file_path, step_id, api_id, verbose, dry_run):
    """Test MOVA file components / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ MOVA —Ñ–∞–π–ª—É"""
    try:
        # Get global options from context
        redis_url = ctx.obj.get('redis_url')
        llm_api_key = ctx.obj.get('llm_api_key')
        llm_model = ctx.obj.get('llm_model')
        llm_temperature = ctx.obj.get('llm_temperature')
        llm_max_tokens = ctx.obj.get('llm_max_tokens')
        llm_timeout = ctx.obj.get('llm_timeout')
        
        file_path = Path(file_path)
        
        # Choose parser based on file extension
        if file_path.suffix.lower() in ['.yaml', '.yml']:
            parser = MovaYamlParser()
        else:
            parser = MovaJsonParser()
        
        # Parse file
        data = parser.parse_file(str(file_path))
        
        # Initialize engine
        engine = MovaEngine(
            redis_url=redis_url,
            llm_api_key=llm_api_key,
            llm_model=llm_model
        )
        
        console.print(Panel("üß™ MOVA Component Testing", style="blue"))
        
        if verbose:
            console.print(f"üìÅ File: {file_path}")
            console.print(f"üîó Redis: {redis_url or 'In-memory'}")
            console.print(f"ü§ñ LLM: {llm_model or 'Mock'}")
        
        # Load data into engine
        load_data_to_engine(engine, data)
        
        # Test specific components
        if step_id:
            test_specific_step(engine, data, step_id, verbose, dry_run)
        elif api_id:
            test_specific_api(engine, data, api_id, verbose, dry_run)
        else:
            # Test all components
            test_all_components(engine, data, verbose, dry_run)
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI test error: {e}")


@main.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--session-id', default='cli_session', help='Session ID for analysis / ID —Å–µ—Å—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É')
@click.option('--output', '-o', type=click.Path(), help='Save recommendations to file / –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output / –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
@click.pass_context
def analyze(ctx, file_path, session_id, output, verbose):
    """Analyze MOVA file and generate AI recommendations / –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ MOVA —Ñ–∞–π–ª —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    import asyncio
    asyncio.run(_analyze_async(ctx, file_path, session_id, output, verbose))


async def _analyze_async(ctx, file_path, session_id, output, verbose):
    """Analyze MOVA file and generate AI recommendations / –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ MOVA —Ñ–∞–π–ª —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    try:
        file_path = Path(file_path)
        
        # Choose parser based on file extension
        if file_path.suffix.lower() in ['.yaml', '.yml']:
            parser = MovaYamlParser()
        else:
            parser = MovaJsonParser()
        
        # Parse file
        data = parser.parse_file(str(file_path))
        
        # Initialize ML integration
        ml_integration = MLIntegration()
        
        console.print(Panel("ü§ñ AI-Powered Analysis", style="blue"))
        console.print(f"üìÑ Analyzing file: {file_path}")
        console.print(f"üÜî Session ID: {session_id}")
        
        # Generate recommendations
        recommendations = []
        
        # Configuration analysis
        if verbose:
            console.print("\nüîß Analyzing configuration...")
        config_recs = await ml_integration.analyze_configuration_recommendations(data, session_id)
        recommendations.extend(config_recs)
        
        # Code quality analysis
        if verbose:
            console.print("üìù Analyzing code quality...")
        quality_recs = await ml_integration.analyze_code_quality_recommendations(data, session_id)
        recommendations.extend(quality_recs)
        
        # Performance analysis (mock metrics for CLI)
        if verbose:
            console.print("‚ö° Analyzing performance patterns...")
        perf_metrics = {
            "avg_response_time": 1.5,
            "memory_usage": 0.6,
            "error_rate": 0.02
        }
        perf_recs = await ml_integration.analyze_performance_recommendations(perf_metrics, session_id)
        recommendations.extend(perf_recs)
        
        # Display recommendations
        display_recommendations(recommendations, verbose)
        
        # Export if specified
        if output:
            success = await ml_integration.export_recommendations(recommendations, output)
            if success:
                console.print(f"‚úÖ Recommendations exported to: {output}", style="green")
            else:
                console.print(f"‚ùå Failed to export recommendations", style="red")
        
        # Summary
        console.print(f"\nüìä Analysis Summary:")
        console.print(f"  ‚Ä¢ Total recommendations: {len(recommendations)}")
        
        by_priority = {}
        by_type = {}
        for rec in recommendations:
            by_priority[rec.priority.value] = by_priority.get(rec.priority.value, 0) + 1
            by_type[rec.type.value] = by_type.get(rec.type.value, 0) + 1
        
        console.print(f"  ‚Ä¢ By priority: {by_priority}")
        console.print(f"  ‚Ä¢ By type: {by_type}")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI analyze error: {e}")


@main.command()
@click.argument('error_message')
@click.option('--session-id', default='cli_session', help='Session ID for analysis / ID —Å–µ—Å—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É')
@click.option('--output', '-o', type=click.Path(), help='Save recommendations to file / –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output / –î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥')
@click.pass_context
def diagnose(ctx, error_message, session_id, output, verbose):
    """Diagnose error and generate AI recommendations / –î—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    import asyncio
    asyncio.run(_diagnose_async(ctx, error_message, session_id, output, verbose))


async def _diagnose_async(ctx, error_message, session_id, output, verbose):
    """Diagnose error and generate AI recommendations / –î—ñ–∞–≥–Ω–æ—Å—Ç—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    try:
        # Initialize ML integration
        ml_integration = MLIntegration()
        
        console.print(Panel("üîç AI-Powered Error Diagnosis", style="yellow"))
        console.print(f"üö® Error: {error_message}")
        console.print(f"üÜî Session ID: {session_id}")
        
        # Generate error recommendations
        recommendations = await ml_integration.analyze_error_recommendations(error_message, session_id)
        
        # Display recommendations
        display_recommendations(recommendations, verbose)
        
        # Export if specified
        if output:
            success = await ml_integration.export_recommendations(recommendations, output)
            if success:
                console.print(f"‚úÖ Recommendations exported to: {output}", style="green")
            else:
                console.print(f"‚ùå Failed to export recommendations", style="red")
        
        # Summary
        console.print(f"\nüìä Diagnosis Summary:")
        console.print(f"  ‚Ä¢ Recommendations generated: {len(recommendations)}")
        
        if recommendations:
            critical_count = sum(1 for rec in recommendations if rec.priority.value == 'critical')
            if critical_count > 0:
                console.print(f"  ‚ö†Ô∏è  Critical issues found: {critical_count}", style="red")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI diagnose error: {e}")


@main.command()
@click.option('--session-id', default='cli_session', help='Session ID for analysis / ID —Å–µ—Å—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É')
@click.option('--output', '-o', type=click.Path(), help='Save recommendations to file / –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª')
@click.pass_context
def recommendations_summary(ctx, session_id, output):
    """Get AI recommendations summary / –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–Ω—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    import asyncio
    asyncio.run(_recommendations_summary_async(ctx, session_id, output))


async def _recommendations_summary_async(ctx, session_id, output):
    """Get AI recommendations summary / –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤–µ–¥–µ–Ω–Ω—è AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    try:
        # Initialize ML integration
        ml_integration = MLIntegration()
        
        console.print(Panel("üìà AI Recommendations Summary", style="cyan"))
        console.print(f"üÜî Session ID: {session_id}")
        
        # Get summary
        summary = await ml_integration.get_recommendation_summary()
        
        # Display summary
        display_recommendation_summary(summary)
        
        # Export if specified
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(summary, f, indent=2, ensure_ascii=False, default=str)
            console.print(f"‚úÖ Summary exported to: {output}", style="green")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"CLI recommendations_summary error: {e}")


# New commands for Redis management
@main.command()
@click.option('--redis-url', default='redis://localhost:6379', help='Redis connection URL / URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis')
@click.option('--session-id', help='Specific session ID to show / –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π ID —Å–µ—Å—ñ—ó –¥–ª—è –ø–æ–∫–∞–∑—É')
@click.option('--pattern', default='mova:session:*', help='Session pattern to list / –ü–∞—Ç–µ—Ä–Ω —Å–µ—Å—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É')
@click.pass_context
def redis_sessions(ctx, redis_url, session_id, pattern):
    """Manage Redis sessions / –ö–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—è–º–∏ Redis"""
    try:
        redis_manager = get_redis_manager(redis_url)
        
        if not redis_manager.is_connected():
            console.print("‚ùå Failed to connect to Redis", style="red")
            return
        
        if session_id:
            # Show specific session
            session_data = redis_manager.get_session_data(session_id)
            if session_data:
                console.print(Panel(f"Session: {session_id}", style="blue"))
                console.print(json.dumps(session_data, indent=2, ensure_ascii=False))
            else:
                console.print(f"‚ùå Session {session_id} not found", style="red")
        else:
            # List all sessions
            sessions = redis_manager.list_sessions(pattern)
            if sessions:
                table = Table(title="Redis Sessions")
                table.add_column("Session ID", style="cyan")
                table.add_column("TTL", style="yellow")
                table.add_column("Created", style="green")
                
                for session in sessions:
                    session_info = redis_manager.get_session_info(session)
                    if session_info:
                        table.add_row(
                            session_info.get('session_id', 'Unknown'),
                            str(session_info.get('ttl', 'Unknown')),
                            session_info.get('created_at', 'Unknown')
                        )
                
                console.print(table)
            else:
                console.print("‚ÑπÔ∏è  No sessions found")
                
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Redis sessions error: {e}")


@main.command()
@click.option('--redis-url', default='redis://localhost:6379', help='Redis connection URL / URL –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis')
@click.option('--session-id', help='Session ID to delete / ID —Å–µ—Å—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
@click.option('--pattern', default='mova:session:*', help='Session pattern to clear / –ü–∞—Ç–µ—Ä–Ω —Å–µ—Å—ñ–π –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è')
@click.option('--confirm', is_flag=True, help='Confirm deletion / –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
@click.pass_context
def redis_clear(ctx, redis_url, session_id, pattern, confirm):
    """Clear Redis sessions / –û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—ó Redis"""
    try:
        redis_manager = get_redis_manager(redis_url)
        
        if not redis_manager.is_connected():
            console.print("‚ùå Failed to connect to Redis", style="red")
            return
        
        if session_id:
            # Delete specific session
            if not confirm and not click.confirm(f"Delete session {session_id}?"):
                return
            
            if redis_manager.delete_session(session_id):
                console.print(f"‚úÖ Session {session_id} deleted", style="green")
            else:
                console.print(f"‚ùå Failed to delete session {session_id}", style="red")
        else:
            # Clear all sessions
            if not confirm and not click.confirm(f"Clear all sessions matching pattern '{pattern}'?"):
                return
            
            if redis_manager.clear_all_sessions(pattern):
                console.print(f"‚úÖ All sessions cleared", style="green")
            else:
                console.print("‚ùå Failed to clear sessions", style="red")
                
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Redis clear error: {e}")


# New commands for cache management
@main.command()
@click.option('--key', help='Specific cache key to show / –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∫–µ—à—É –¥–ª—è –ø–æ–∫–∞–∑—É')
@click.option('--stats', is_flag=True, help='Show cache statistics / –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É')
def cache_info(key, stats):
    """Show cache information / –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–µ—à"""
    try:
        cache_manager = get_cache()
        
        if key:
            # Show specific cache entry
            value = cache_manager.get(key)
            if value is not None:
                console.print(Panel(f"Cache Key: {key}", style="blue"))
                console.print(json.dumps(value, indent=2, ensure_ascii=False))
            else:
                console.print(f"‚ùå Cache key '{key}' not found", style="red")
        elif stats:
            # Show cache statistics
            stats_data = cache_manager.get_stats()
            console.print(Panel("Cache Statistics", style="blue"))
            
            table = Table()
            table.add_column("Metric", style="cyan")
            table.add_column("Value", style="yellow")
            
            for metric, value in stats_data.items():
                table.add_row(metric, str(value))
            
            console.print(table)
        else:
            console.print("‚ÑπÔ∏è  Use --key to show specific cache entry or --stats for statistics")
            
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Cache info error: {e}")


@main.command()
@click.option('--key', help='Specific cache key to delete / –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á –∫–µ—à—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
@click.option('--confirm', is_flag=True, help='Confirm deletion / –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è')
def cache_clear(key, confirm):
    """Clear cache / –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à"""
    try:
        cache_manager = get_cache()
        
        if key:
            # Delete specific cache entry
            if not confirm and not click.confirm(f"Delete cache key '{key}'?"):
                return
            
            if cache_manager.delete(key):
                console.print(f"‚úÖ Cache key '{key}' deleted", style="green")
            else:
                console.print(f"‚ùå Failed to delete cache key '{key}'", style="red")
        else:
            # Clear all cache
            if not confirm and not click.confirm("Clear all cache?"):
                return
            
            if cache_manager.clear():
                console.print("‚úÖ All cache cleared", style="green")
            else:
                console.print("‚ùå Failed to clear cache", style="red")
                
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Cache clear error: {e}")


# New commands for webhook management
@main.command()
@click.option('--url', required=True, help='Webhook URL / URL webhook')
@click.option('--event-type', required=True, help='Event type / –¢–∏–ø –ø–æ–¥—ñ—ó')
@click.option('--data', help='Event data (JSON) / –î–∞–Ω—ñ –ø–æ–¥—ñ—ó (JSON)')
def webhook_test(url, event_type, data):
    """Test webhook endpoint / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ webhook endpoint"""
    try:
        from ..webhook import trigger_webhook_event, WebhookEventType
        
        # Parse event data if provided
        event_data = None
        if data:
            try:
                event_data = json.loads(data)
            except json.JSONDecodeError:
                console.print("‚ùå Invalid JSON data", style="red")
                return
        
        # Map event type to enum
        event_map = {
            "validation_started": WebhookEventType.VALIDATION_STARTED,
            "validation_completed": WebhookEventType.VALIDATION_COMPLETED,
            "validation_failed": WebhookEventType.VALIDATION_FAILED,
            "cache_updated": WebhookEventType.CACHE_UPDATED,
            "cache_cleared": WebhookEventType.CACHE_CLEARED,
            "redis_connected": WebhookEventType.REDIS_CONNECTED,
            "redis_disconnected": WebhookEventType.REDIS_DISCONNECTED,
            "llm_request_started": WebhookEventType.LLM_REQUEST_STARTED,
            "llm_request_completed": WebhookEventType.LLM_REQUEST_COMPLETED,
            "llm_request_failed": WebhookEventType.LLM_REQUEST_FAILED,
            "ml_intent_recognized": WebhookEventType.ML_INTENT_RECOGNIZED,
            "ml_entity_extracted": WebhookEventType.ML_ENTITY_EXTRACTED,
            "ml_prediction_made": WebhookEventType.ML_PREDICTION_MADE
        }
        
        webhook_event = event_map.get(event_type)
        if not webhook_event:
            console.print(f"‚ùå Unknown event type: {event_type}", style="red")
            console.print(f"Available types: {list(event_map.keys())}")
            return
        
        # Trigger webhook
        trigger_webhook_event(webhook_event, event_data)
        console.print(f"‚úÖ Webhook event '{event_type}' triggered", style="green")
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Webhook test error: {e}")


@main.command()
def webhook_status():
    """Show webhook status / –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å webhook"""
    try:
        webhook_integration = get_webhook_integration()
        
        console.print(Panel("Webhook Status", style="blue"))
        console.print(f"Enabled: {webhook_integration._enabled}")
        
        if webhook_integration._enabled:
            webhook_manager = webhook_integration.webhook_manager
            if webhook_manager:
                console.print(f"Manager initialized: {webhook_manager is not None}")
                # Add more status information as needed
            else:
                console.print("Manager not initialized")
        else:
            console.print("Webhook integration is disabled")
            
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"Webhook status error: {e}")


# New commands for ML management
@main.command()
@click.option('--model-id', help='Specific model ID to show / –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π ID –º–æ–¥–µ–ª—ñ –¥–ª—è –ø–æ–∫–∞–∑—É')
@click.option('--list-models', is_flag=True, help='List all available models / –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ')
def ml_models(model_id, list_models):
    """Show ML models information / –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ ML –º–æ–¥–µ–ª—ñ"""
    try:
        ml_integration = MLIntegration()
        
        if model_id:
            # Show specific model info
            model_info = ml_integration.get_model_info(model_id)
            if model_info:
                console.print(Panel(f"Model: {model_id}", style="blue"))
                console.print(json.dumps(model_info, indent=2, ensure_ascii=False))
            else:
                console.print(f"‚ùå Model '{model_id}' not found", style="red")
        elif list_models:
            # List all models
            models = ml_integration.list_available_models()
            if models:
                table = Table(title="Available ML Models")
                table.add_column("Model ID", style="cyan")
                table.add_column("Type", style="yellow")
                table.add_column("Status", style="green")
                
                for model in models:
                    table.add_row(
                        model.get('id', 'Unknown'),
                        model.get('type', 'Unknown'),
                        model.get('status', 'Unknown')
                    )
                
                console.print(table)
            else:
                console.print("‚ÑπÔ∏è  No models found")
        else:
            console.print("‚ÑπÔ∏è  Use --model-id to show specific model or --list-models for all models")
            
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"ML models error: {e}")


@main.command()
@click.option('--model-id', required=True, help='Model ID to evaluate / ID –º–æ–¥–µ–ª—ñ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏')
@click.option('--test-data', required=True, type=click.Path(exists=True), help='Test data file / –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö')
@click.option('--output', '-o', type=click.Path(), help='Save evaluation results to file / –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –≤ —Ñ–∞–π–ª')
def ml_evaluate(model_id, test_data, output):
    """Evaluate ML model / –û—Ü—ñ–Ω–∏—Ç–∏ ML –º–æ–¥–µ–ª—å"""
    try:
        import asyncio
        
        # Load test data
        with open(test_data, 'r', encoding='utf-8') as f:
            test_data_list = json.load(f)
        
        ml_integration = MLIntegration()
        
        console.print(f"üîç Evaluating model: {model_id}")
        console.print(f"üìä Test data: {len(test_data_list)} examples")
        
        # Run evaluation
        result = asyncio.run(ml_integration.evaluate_model(model_id, test_data_list))
        
        # Display results
        console.print(Panel("Model Evaluation Results", style="blue"))
        console.print(json.dumps(result, indent=2, ensure_ascii=False))
        
        # Export if specified
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            console.print(f"‚úÖ Results exported to: {output}", style="green")
            
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"ML evaluate error: {e}")


@main.command()
def ml_status():
    """Show ML system status / –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å ML —Å–∏—Å—Ç–µ–º–∏"""
    try:
        ml_integration = MLIntegration()
        
        status = ml_integration.get_system_status()
        
        console.print(Panel("ML System Status", style="blue"))
        
        table = Table()
        table.add_column("Component", style="cyan")
        table.add_column("Status", style="yellow")
        table.add_column("Details", style="green")
        
        for component, info in status.items():
            table.add_row(
                component,
                info.get('status', 'Unknown'),
                str(info.get('details', ''))
            )
        
        console.print(table)
        
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        logger.error(f"ML status error: {e}")


def test_specific_step(engine, data, step_id, verbose, dry_run):
    """Test a specific step / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫—Ä–æ–∫"""
    console.print(f"\nüéØ Testing step: {step_id}")
    
    # Find step in protocols
    step_found = False
    for protocol in data.get("protocols", []):
        for step in protocol.get("steps", []):
            if step.get("id") == step_id:
                step_found = True
                console.print(f"üìã Found in protocol: {protocol.get('name')}")
                
                if dry_run:
                    console.print(f"üîç Would test step: {step}")
                else:
                    # Create test session
                    session = engine.create_session("test_user")
                    
                    # Execute step
                    if step.get("action") == "prompt":
                        result = engine._execute_prompt_step(
                            ProtocolStep(**step), session
                        )
                        console.print(f"‚úÖ Step result: {result}")
                    elif step.get("action") == "tool_api":
                        result = engine._execute_api_step(
                            ProtocolStep(**step), session
                        )
                        console.print(f"‚úÖ API result: {result}")
                    else:
                        console.print(f"‚ö†Ô∏è  Action type not supported for testing: {step.get('action')}")
                
                break
        if step_found:
            break
    
    if not step_found:
        console.print(f"‚ùå Step '{step_id}' not found in any protocol")


def test_specific_api(engine, data, api_id, verbose, dry_run):
    """Test a specific API / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π API"""
    console.print(f"\nüîå Testing API: {api_id}")
    
    # Find API in tools
    api_found = False
    for tool in data.get("tools", []):
        if tool.get("id") == api_id:
            api_found = True
            console.print(f"üìã Found API: {tool.get('name')}")
            console.print(f"üåê Endpoint: {tool.get('endpoint')}")
            
            if dry_run:
                console.print(f"üîç Would test API: {tool}")
            else:
                # Test API call
                try:
                    # Convert tool dict to ToolAPI object
                    from src.mova.core.models import ToolAPI
                    tool_obj = ToolAPI(**tool)
                    result = engine._execute_api_call(tool_obj, {})
                    console.print(f"‚úÖ API test result: {result}")
                except Exception as e:
                    console.print(f"‚ùå API test failed: {e}")
            
            break
    
    if not api_found:
        console.print(f"‚ùå API '{api_id}' not found in tools")


def test_all_components(engine, data, verbose, dry_run):
    """Test all components / –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"""
    console.print("\nüîç Testing all components...")
    
    # Test intents
    intents = data.get("intents", [])
    console.print(f"üìã Intents: {len(intents)} found")
    for intent in intents:
        console.print(f"  ‚Ä¢ {intent.get('name')} ({len(intent.get('patterns', []))} patterns)")
    
    # Test protocols
    protocols = data.get("protocols", [])
    console.print(f"üìã Protocols: {len(protocols)} found")
    for protocol in protocols:
        steps = protocol.get("steps", [])
        console.print(f"  ‚Ä¢ {protocol.get('name')} ({len(steps)} steps)")
        if verbose:
            for step in steps:
                console.print(f"    - {step.get('id')}: {step.get('action')}")
    
    # Test tools
    tools = data.get("tools", [])
    console.print(f"üîå Tools: {len(tools)} found")
    for tool in tools:
        console.print(f"  ‚Ä¢ {tool.get('name')} ({tool.get('method', 'GET')} {tool.get('endpoint')})")
    
    # Test LLM connection if available
    if engine.llm_client:
        console.print("\nü§ñ Testing LLM connection...")
        try:
            if engine.llm_client.test_connection():
                console.print("‚úÖ LLM connection successful")
            else:
                console.print("‚ùå LLM connection failed")
        except Exception as e:
            console.print(f"‚ùå LLM test error: {e}")
    
    # Test Redis connection if available
    if engine.redis_manager:
        console.print("\nüîó Testing Redis connection...")
        try:
            if engine.redis_manager.is_connected():
                console.print("‚úÖ Redis connection successful")
            else:
                console.print("‚ùå Redis connection failed")
        except Exception as e:
            console.print(f"‚ùå Redis test error: {e}")
    
    console.print("\n‚úÖ Component testing completed")


def display_validation_summary(report: dict):
    """Display validation summary / –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
    console.print(Panel("üîç MOVA Validation Summary", style="blue"))
    
    # Overall status
    if report["overall_valid"]:
        console.print("‚úÖ Overall validation: PASSED", style="green")
    else:
        console.print("‚ùå Overall validation: FAILED", style="red")
    
    # Statistics
    stats = report["advanced_validation"]["summary"]["statistics"]
    console.print(f"üìä Components: {stats['intents']} intents, {stats['protocols']} protocols, {stats['tools']} tools")
    console.print(f"üìã Steps: {stats['steps']} total")
    
    # Issues
    total_errors = report["total_errors"]
    total_warnings = report["total_warnings"]
    
    if total_errors > 0:
        console.print(f"‚ùå Errors: {total_errors}", style="red")
    if total_warnings > 0:
        console.print(f"‚ö†Ô∏è  Warnings: {total_warnings}", style="yellow")
    
    if total_errors == 0 and total_warnings == 0:
        console.print("üéâ No issues found!", style="green")


def display_advanced_validation_report(report: dict):
    """Display detailed validation report / –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó"""
    console.print(Panel("üîç MOVA Advanced Validation Report", style="blue"))
    
    # Basic validation
    basic = report["basic_validation"]
    if basic["is_valid"]:
        console.print("‚úÖ Basic schema validation: PASSED", style="green")
    else:
        console.print("‚ùå Basic schema validation: FAILED", style="red")
        for error in basic["errors"]:
            console.print(f"  ‚Ä¢ {error}", style="red")
    
    # Advanced validation
    advanced = report["advanced_validation"]
    console.print(f"\nüìä Advanced Validation Statistics:")
    stats = advanced["summary"]["statistics"]
    console.print(f"  ‚Ä¢ Intents: {stats['intents']}")
    console.print(f"  ‚Ä¢ Protocols: {stats['protocols']}")
    console.print(f"  ‚Ä¢ Tools: {stats['tools']}")
    console.print(f"  ‚Ä¢ Steps: {stats['steps']}")
    console.print(f"  ‚Ä¢ Duplicates: {stats['duplicates']}")
    console.print(f"  ‚Ä¢ Invalid references: {stats['references']}")
    
    # Errors
    if advanced["errors"]:
        console.print(f"\n‚ùå Errors ({len(advanced['errors'])}):", style="red")
        for error in advanced["errors"]:
            console.print(f"  ‚Ä¢ {error['field']}: {error['message']}", style="red")
    
    # Warnings
    if advanced["warnings"]:
        console.print(f"\n‚ö†Ô∏è  Warnings ({len(advanced['warnings'])}):", style="yellow")
        for warning in advanced["warnings"]:
            console.print(f"  ‚Ä¢ {warning['field']}: {warning['message']}", style="yellow")
    
    # Recommendations
    if advanced["recommendations"]:
        console.print(f"\nüí° Recommendations:", style="cyan")
        for rec in advanced["recommendations"]:
            console.print(f"  ‚Ä¢ {rec}", style="cyan")


def save_validation_report(report: dict, output_path: str):
    """Save validation report to file / –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤ —Ñ–∞–π–ª"""
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        console.print(f"üìÑ Validation report saved to: {output_path}", style="green")
    except Exception as e:
        console.print(f"‚ùå Failed to save report: {e}", style="red")


def execute_protocol_step_by_step(engine, protocol, session_id, verbose):
    """Execute protocol step by step with user confirmation / –í–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∫—Ä–æ–∫–æ–≤–æ –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    from rich.prompt import Confirm
    
    console.print(f"\nüéØ Step-by-step execution of protocol: {protocol['name']}")
    
    steps = protocol.get("steps", [])
    results = []
    
    for i, step in enumerate(steps, 1):
        console.print(f"\nüìã Step {i}/{len(steps)}: {step.get('id')} ({step.get('action')})")
        
        if verbose:
            console.print(f"   Details: {step}")
        
        # Ask for confirmation
        if not Confirm.ask(f"Execute step {i}?"):
            console.print("‚è∏Ô∏è  Step skipped")
            continue
        
        try:
            # Execute step
            session = engine.sessions.get(session_id)
            if not session:
                console.print("‚ùå Session not found")
                break
            
            # Convert step dict to ProtocolStep object
            from src.mova.core.models import ProtocolStep
            step_obj = ProtocolStep(**step)
            
            # Execute step
            result = engine._execute_step(step_obj, session)
            results.append(result)
            
            console.print(f"‚úÖ Step {i} completed: {result}")
            
            # Show session data if verbose
            if verbose:
                console.print(f"   Session data: {session.data}")
            
        except Exception as e:
            console.print(f"‚ùå Step {i} failed: {e}")
            results.append({"error": str(e)})
            
            if not Confirm.ask("Continue with next step?"):
                break
    
    return {
        "protocol": protocol['name'],
        "steps_executed": len(results),
        "results": results
    }


def display_parsed_data(data: dict):
    """Display parsed data in a nice format / –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ –¥–∞–Ω—ñ –≤ –≥–∞—Ä–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ"""
    console.print(Panel("üìä Parsed MOVA Data", style="blue"))
    
    # Create summary table
    table = Table(title="File Summary")
    table.add_column("Component", style="cyan")
    table.add_column("Count", style="magenta")
    
    components = [
        ("Intents", "intents"),
        ("Protocols", "protocols"),
        ("Tools", "tools"),
        ("Instructions", "instructions"),
        ("Profiles", "profiles"),
        ("Sessions", "sessions"),
        ("Contracts", "contracts")
    ]
    
    for name, key in components:
        count = len(data.get(key, []))
        table.add_row(name, str(count))
    
    console.print(table)


def display_execution_result(result: dict):
    """Display execution result / –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"""
    if "error" in result:
        console.print(f"‚ùå Execution failed: {result['error']}", style="red")
    else:
        console.print(f"‚úÖ Protocol '{result['protocol']}' executed successfully", style="green")
        console.print(f"üìù Steps executed: {len(result['steps_executed'])}")


def export_data(data: dict, output_path: str, parser):
    """Export data to file / –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –¥–æ —Ñ–∞–π–ª—É"""
    try:
        output_path = Path(output_path)
        
        if output_path.suffix.lower() in ['.yaml', '.yml']:
            success = parser.export_to_yaml(data, str(output_path))
        else:
            success = parser.export_to_json(data, str(output_path))
        
        if success:
            console.print(f"üíæ Data exported to: {output_path}", style="green")
        else:
            console.print(f"‚ùå Failed to export data", style="red")
            
    except Exception as e:
        console.print(f"‚ùå Export error: {e}", style="red")


def load_data_to_engine(engine: MovaEngine, data: dict):
    """Load parsed data into engine / –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ –¥–∞–Ω—ñ –¥–æ –¥–≤–∏–∂–∫–∞"""
    console.print(f"üìä Loading data: {list(data.keys())}")
    
    # Load intents
    intents = data.get("intents") or []
    console.print(f"üìã Loading {len(intents)} intents")
    for intent_data in intents:
        from ..core.models import Intent, IntentType
        intent = Intent(
            name=intent_data["name"],
            patterns=intent_data["patterns"],
            priority=intent_data.get("priority", 0),
            response_template=intent_data.get("response_template"),
            intent_type=IntentType(intent_data.get("intent_type", "custom"))
        )
        engine.add_intent(intent)
    
    # Load protocols
    protocols = data.get("protocols") or []
    console.print(f"üìã Loading {len(protocols)} protocols")
    for protocol_data in protocols:
        from ..core.models import Protocol, ProtocolStep, ActionType, Condition, ComparisonOperator
        
        console.print(f"  üìã Loading protocol: {protocol_data.get('name', 'Unknown')}")
        steps = []
        steps_data = protocol_data.get("steps") or []
        console.print(f"    üìã Loading {len(steps_data)} steps")
        for step_data in steps_data:
            conditions = []
            conditions_data = step_data.get("conditions") or []
            for condition_data in conditions_data:
                condition = Condition(
                    variable=condition_data["variable"],
                    operator=ComparisonOperator(condition_data["operator"]),
                    value=condition_data["value"]
                )
                conditions.append(condition)
            
            step = ProtocolStep(
                id=step_data["id"],
                action=ActionType(step_data["action"]),
                prompt=step_data.get("prompt"),
                tool_api_id=step_data.get("tool_api_id"),
                conditions=conditions if conditions else None,
                next_step=step_data.get("next_step")
            )
            steps.append(step)
        
        protocol = Protocol(
            name=protocol_data["name"],
            steps=steps,
            description=protocol_data.get("description")
        )
        engine.add_protocol(protocol)
    
    # Load tools
    tools = data.get("tools") or []
    console.print(f"üìã Loading {len(tools)} tools")
    for tool_data in tools:
        from ..core.models import ToolAPI
        tool = ToolAPI(
            id=tool_data["id"],
            name=tool_data["name"],
            endpoint=tool_data["endpoint"],
            method=tool_data.get("method", "GET"),
            headers=tool_data.get("headers"),
            parameters=tool_data.get("parameters"),
            authentication=tool_data.get("authentication")
        )
        engine.add_tool(tool)


def create_project_structure():
    """Create project directory structure / –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –ø—Ä–æ–µ–∫—Ç—É"""
    directories = [
        "src/mova/core",
        "src/mova/parser", 
        "src/mova/validator",
        "src/mova/cli",
        "examples",
        "schemas",
        "tests",
        "docs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)


def create_example_files():
    """Create example MOVA files / –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ MOVA —Ñ–∞–π–ª—ñ–≤"""
    # Create example JSON file
    example_json = {
        "version": "2.0",
        "intents": [
            {
                "name": "greeting",
                "patterns": ["hello", "hi", "–ø—Ä–∏–≤—ñ—Ç"],
                "priority": 1,
                "intent_type": "greeting",
                "response_template": "Hello! How can I help you?"
            }
        ],
        "protocols": [
            {
                "name": "simple_conversation",
                "description": "Simple conversation protocol",
                "steps": [
                    {
                        "id": "start",
                        "action": "prompt",
                        "prompt": "Welcome to the conversation!"
                    },
                    {
                        "id": "end",
                        "action": "end"
                    }
                ]
            }
        ]
    }
    
    with open("examples/example.json", "w", encoding="utf-8") as f:
        import json
        json.dump(example_json, f, indent=2, ensure_ascii=False)


def display_recommendations(recommendations, verbose=False):
    """Display ML recommendations / –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    if not recommendations:
        console.print("‚ÑπÔ∏è  No recommendations available")
        return
    
    console.print(Panel("ü§ñ AI Recommendations", style="cyan"))
    
    for i, rec in enumerate(recommendations, 1):
        # Color based on priority
        priority_colors = {
            "critical": "red",
            "high": "yellow", 
            "medium": "blue",
            "low": "green"
        }
        color = priority_colors.get(rec.priority.value, "white")
        
        console.print(f"{i}. [{rec.priority.value.upper()}] {rec.title}", style=color)
        console.print(f"   Type: {rec.type.value}")
        console.print(f"   Description: {rec.description}")
        
        if verbose and rec.details:
            console.print(f"   Details: {rec.details}")
        
        if rec.suggestions:
            console.print("   Suggestions:")
            for suggestion in rec.suggestions:
                console.print(f"     ‚Ä¢ {suggestion}")
        
        console.print()  # Empty line for readability


def display_recommendation_summary(summary):
    """Display recommendation summary / –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
    console.print(Panel("üìä Recommendation Summary", style="cyan"))
    
    # Overall statistics
    if "total_recommendations" in summary:
        console.print(f"Total recommendations: {summary['total_recommendations']}")
    
    # By priority
    if "by_priority" in summary:
        console.print("\nBy Priority:")
        for priority, count in summary["by_priority"].items():
            console.print(f"  {priority}: {count}")
    
    # By type
    if "by_type" in summary:
        console.print("\nBy Type:")
        for rec_type, count in summary["by_type"].items():
            console.print(f"  {rec_type}: {count}")
    
    # Recent recommendations
    if "recent_recommendations" in summary:
        console.print(f"\nRecent recommendations: {len(summary['recent_recommendations'])}")
        for rec in summary["recent_recommendations"][:5]:  # Show last 5
            console.print(f"  ‚Ä¢ {rec['title']} ({rec['priority']})")


if __name__ == "__main__":
    main() 